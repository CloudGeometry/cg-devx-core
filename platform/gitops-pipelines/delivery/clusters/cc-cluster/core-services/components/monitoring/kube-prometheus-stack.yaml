apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '10'
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: kube-prometheus-stack
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  project: core
  source:
    chart: kube-prometheus-stack
    helm:
      skipCrds: true
      values: |-
        prometheus:
          prometheusSpec:
            podMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelector: {}
            serviceMonitorNamespaceSelector: {}
        prometheusOperator:
            admissionWebhooks:
              failurePolicy: Ignore
        # https://stackoverflow.com/questions/71924744/how-to-overwrite-alertmanager-configuration-in-kube-prometheus-stack-helm-chart
        # https://github.com/prometheus-community/helm-charts/issues/355
        alertmanager:
          config:
            global:
              resolve_timeout: 10m
              # slack_api_url: "https://hooks.slack.com/services/PLACE/HERE/YOURTOKEN"
            route:
              group_by: ['namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              # receiver: 'slack-notifications'
              routes:
              - receiver: 'null'
                matchers:
                  - alertname =~ "InfoInhibitor|Watchdog"
              # - receiver: 'slack-notifications'
              #   continue: true
            receivers:
            - name: 'null'
            # - name: 'slack-notifications'
            #   slack_configs:
            #   - channel: 'alerts-channel'
            #     username: 'AlertBot'
            #     send_resolved: true
            #     title_link: ' '
            #     title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
            #     text: >-
            #       {{ range .Alerts }}
            #         *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
            #         *Description:* {{ .Annotations.description }}
            #         *Details:*
            #         {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            #         {{ end }}
            #       {{ end }}
        ## Component scraping the kube controller manager
        ##
        kubeControllerManager:
          enabled: false
        ## Component scraping kube scheduler
        ##
        kubeScheduler:
          enabled: false
        grafana:
          envFromSecret: grafana-secrets
          persistence:
            enabled: true
            type: statefulset
          admin:
              existingSecret: grafana-secrets
              userKey: grafana-user
              passwordKey: grafana-pass
          additionalDataSources:
            - name: Loki
              type: loki
              url: http://loki:3100
          grafana.ini:
            check_for_updates: false
            reporting_enabled: false
            server:
              enable_gzip: true
              root_url: https://<GRAFANA_INGRESS_URL>
            security:
              disable_gravatar: true
            dashboards:
              min_refresh_interval: 60s
            users:
              auto_assign_org: true
              auto_assign_org_role: Viewer
            auth.generic_oauth:
              name: Vault
              enabled: true
              allow_sign_up: true
              auto_login: false
              client_id: $grafana-secrets:client-id
              client_secret: $grafana-secrets:client-secret
              auth_url: https://<OIDC_PROVIDER_AUTHORIZE_URL>
              token_url: https://<OIDC_PROVIDER_TOKEN_URL>
              api_url: https://<OIDC_PROVIDER_USERINFO_URL>
              allow_assign_grafana_admin: true
              skip_org_role_sync: false
              # use_refresh_token: false
              scopes: openid groups user profile email
              allowed_domains: # TODO: add domain to whitelist
              role_attribute_strict: false
              role_attribute_path: contains(groups[*], 'admins') && 'Admin' || contains(groups[*], 'developers') && 'Editor' || 'Viewer'
          ingress:
            enabled: true
            ingressClassName: nginx
            hosts:
              - <GRAFANA_INGRESS_URL>
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            tls: 
              - secretName: grafana-tls
                hosts:
                - <GRAFANA_INGRESS_URL>
          sidecar:
            dashboards:
              enabled: true
              defaultFolderName: "General"
              label: grafana_dashboard
              labelValue: "1"
              folderAnnotation: grafana_folder
              searchNamespace: ALL
              provider:
                foldersFromFilesStructure: true
          # Provision grafana-dashboards-kubernetes
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
              - name: 'grafana-dashboards-kubernetes'
                orgId: 1
                folder: 'Kubernetes'
                type: file
                disableDeletion: true
                editable: true
                options:
                  path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
          dashboards:
            grafana-dashboards-kubernetes:
              k8s-system-api-server:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
                token: ''
              k8s-system-coredns:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
                token: ''
              k8s-views-global:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
                token: ''
              k8s-views-namespaces:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
                token: ''
              k8s-views-nodes:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
                token: ''
              k8s-views-pods:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
                token: ''
              k8s-addons-prometheus:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-addons-prometheus.json
                token: ''
              k8s-addons-trivy-operator:
                url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-addons-trivy-operator.json
                token: ''
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 47.6.1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
