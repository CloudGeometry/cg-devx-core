---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argo
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: '10'
spec:
  project: core
  source:
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 0.40.11
    helm:
      valuesObject:
        workflowDefaults:
          spec:
            podGC:
              strategy: 
                strategy: OnWorkflowSuccess
            ttlStrategy:
              secondsAfterCompletion: 3600  
              secondsAfterSuccess: 600  
              secondsAfterFailure: 1440 
        singleNamespace: false
        nameOverride: argo
        controller:
          rbac:
            create: true
          workflowNamespaces: [argo]
          image:
            registry: "<REGISTRY_INGRESS_URL>/quay-proxy"
            repository: "argoproj/workflow-controller"
        images:
          pullPolicy: IfNotPresent
          pullSecrets:
            - name: proxy-docker-config
        mainContainer:
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
        executor:
          image:
            registry: "<REGISTRY_INGRESS_URL>/quay-proxy"
            repository: "argoproj/argoexec"
            pullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m 
              memory: 1Gi
        workflow:
          serviceAccount:
            pullSecrets:
              - name: proxy-docker-config
            create: true
          rbac:
            create: true
        server:
          image:
            registry: "<REGISTRY_INGRESS_URL>/quay-proxy"
            repository: "argoproj/argocli"
          authMode: sso
          secure: false
          serviceAccount:
            create: true
            name: argo-server
            annotations:
              <K8S_ROLE_MAPPING>: "<CI_IAM_ROLE_RN>"
          rbac:
            create: true
          extraEnv:
            - name: SSO_DELEGATE_RBAC_TO_NAMESPACE
              value: 'true'
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            hosts: [<CI_INGRESS_URL>]
            paths: [/]
            pathType: Prefix
            tls:
              - secretName: argo-tls
                hosts: [<CI_INGRESS_URL>]
          sso:
            enabled: true
            issuer: https://<OIDC_PROVIDER_URL>
            clientId:
              name: argo-secrets
              key: client-id
            clientSecret:
              name: argo-secrets
              key: client-secret
            redirectUrl: https://<CI_OAUTH_CALLBACK_URL>
            scopes: [email, openid, groups, user, profile]
            rbac:
              enabled: true
        useDefaultArtifactRepo: true
        useStaticCredentials: false
        artifactRepository:
          archiveLogs: false
          s3:
            insecure: false
            bucket: <CLOUD_BINARY_ARTIFACTS_STORE>
            keyFormat: argo-workflows/artifacts/{{workflow.creationTimestamp.Y}}/{{workflow.creationTimestamp.m}}/{{workflow.creationTimestamp.d}}/{{workflow.uid}}/{{workflow.name}}/{{pod.name}}
            endpoint: s3.amazonaws.com
            region: <CLOUD_REGION>
            useSDKCreds: true
            encryptionOptions:
              enableEncryption: false
    chart: argo-workflows
  destination:
    server: https://kubernetes.default.svc
    namespace: argo
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions: [CreateNamespace=true]
